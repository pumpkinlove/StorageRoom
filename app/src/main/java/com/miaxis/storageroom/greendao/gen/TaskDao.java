package com.miaxis.storageroom.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.storageroom.bean.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Taskcode = new Property(1, String.class, "taskcode", false, "TASKCODE");
        public final static Property Taskseq = new Property(2, String.class, "taskseq", false, "TASKSEQ");
        public final static Property Deptno = new Property(3, String.class, "deptno", false, "DEPTNO");
        public final static Property Carid = new Property(4, String.class, "carid", false, "CARID");
        public final static Property Plateno = new Property(5, String.class, "plateno", false, "PLATENO");
        public final static Property Taskdate = new Property(6, String.class, "taskdate", false, "TASKDATE");
        public final static Property Begintime = new Property(7, String.class, "begintime", false, "BEGINTIME");
        public final static Property Endtime = new Property(8, String.class, "endtime", false, "ENDTIME");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property StatusName = new Property(10, String.class, "statusName", false, "STATUS_NAME");
        public final static Property Exetime = new Property(11, String.class, "exetime", false, "EXETIME");
        public final static Property Createuser = new Property(12, String.class, "createuser", false, "CREATEUSER");
        public final static Property Createusername = new Property(13, String.class, "createusername", false, "CREATEUSERNAME");
        public final static Property Opuser = new Property(14, String.class, "opuser", false, "OPUSER");
        public final static Property Opusername = new Property(15, String.class, "opusername", false, "OPUSERNAME");
        public final static Property Opdate = new Property(16, String.class, "opdate", false, "OPDATE");
        public final static Property Tasktype = new Property(17, String.class, "tasktype", false, "TASKTYPE");
        public final static Property Tasklevel = new Property(18, String.class, "tasklevel", false, "TASKLEVEL");
        public final static Property Seculevel = new Property(19, String.class, "seculevel", false, "SECULEVEL");
        public final static Property Createtime = new Property(20, String.class, "createtime", false, "CREATETIME");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASKCODE\" TEXT," + // 1: taskcode
                "\"TASKSEQ\" TEXT," + // 2: taskseq
                "\"DEPTNO\" TEXT," + // 3: deptno
                "\"CARID\" TEXT," + // 4: carid
                "\"PLATENO\" TEXT," + // 5: plateno
                "\"TASKDATE\" TEXT," + // 6: taskdate
                "\"BEGINTIME\" TEXT," + // 7: begintime
                "\"ENDTIME\" TEXT," + // 8: endtime
                "\"STATUS\" TEXT," + // 9: status
                "\"STATUS_NAME\" TEXT," + // 10: statusName
                "\"EXETIME\" TEXT," + // 11: exetime
                "\"CREATEUSER\" TEXT," + // 12: createuser
                "\"CREATEUSERNAME\" TEXT," + // 13: createusername
                "\"OPUSER\" TEXT," + // 14: opuser
                "\"OPUSERNAME\" TEXT," + // 15: opusername
                "\"OPDATE\" TEXT," + // 16: opdate
                "\"TASKTYPE\" TEXT," + // 17: tasktype
                "\"TASKLEVEL\" TEXT," + // 18: tasklevel
                "\"SECULEVEL\" TEXT," + // 19: seculevel
                "\"CREATETIME\" TEXT);"); // 20: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String taskcode = entity.getTaskcode();
        if (taskcode != null) {
            stmt.bindString(2, taskcode);
        }
 
        String taskseq = entity.getTaskseq();
        if (taskseq != null) {
            stmt.bindString(3, taskseq);
        }
 
        String deptno = entity.getDeptno();
        if (deptno != null) {
            stmt.bindString(4, deptno);
        }
 
        String carid = entity.getCarid();
        if (carid != null) {
            stmt.bindString(5, carid);
        }
 
        String plateno = entity.getPlateno();
        if (plateno != null) {
            stmt.bindString(6, plateno);
        }
 
        String taskdate = entity.getTaskdate();
        if (taskdate != null) {
            stmt.bindString(7, taskdate);
        }
 
        String begintime = entity.getBegintime();
        if (begintime != null) {
            stmt.bindString(8, begintime);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(9, endtime);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(11, statusName);
        }
 
        String exetime = entity.getExetime();
        if (exetime != null) {
            stmt.bindString(12, exetime);
        }
 
        String createuser = entity.getCreateuser();
        if (createuser != null) {
            stmt.bindString(13, createuser);
        }
 
        String createusername = entity.getCreateusername();
        if (createusername != null) {
            stmt.bindString(14, createusername);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(15, opuser);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(16, opusername);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(17, opdate);
        }
 
        String tasktype = entity.getTasktype();
        if (tasktype != null) {
            stmt.bindString(18, tasktype);
        }
 
        String tasklevel = entity.getTasklevel();
        if (tasklevel != null) {
            stmt.bindString(19, tasklevel);
        }
 
        String seculevel = entity.getSeculevel();
        if (seculevel != null) {
            stmt.bindString(20, seculevel);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(21, createtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String taskcode = entity.getTaskcode();
        if (taskcode != null) {
            stmt.bindString(2, taskcode);
        }
 
        String taskseq = entity.getTaskseq();
        if (taskseq != null) {
            stmt.bindString(3, taskseq);
        }
 
        String deptno = entity.getDeptno();
        if (deptno != null) {
            stmt.bindString(4, deptno);
        }
 
        String carid = entity.getCarid();
        if (carid != null) {
            stmt.bindString(5, carid);
        }
 
        String plateno = entity.getPlateno();
        if (plateno != null) {
            stmt.bindString(6, plateno);
        }
 
        String taskdate = entity.getTaskdate();
        if (taskdate != null) {
            stmt.bindString(7, taskdate);
        }
 
        String begintime = entity.getBegintime();
        if (begintime != null) {
            stmt.bindString(8, begintime);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(9, endtime);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(11, statusName);
        }
 
        String exetime = entity.getExetime();
        if (exetime != null) {
            stmt.bindString(12, exetime);
        }
 
        String createuser = entity.getCreateuser();
        if (createuser != null) {
            stmt.bindString(13, createuser);
        }
 
        String createusername = entity.getCreateusername();
        if (createusername != null) {
            stmt.bindString(14, createusername);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(15, opuser);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(16, opusername);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(17, opdate);
        }
 
        String tasktype = entity.getTasktype();
        if (tasktype != null) {
            stmt.bindString(18, tasktype);
        }
 
        String tasklevel = entity.getTasklevel();
        if (tasklevel != null) {
            stmt.bindString(19, tasklevel);
        }
 
        String seculevel = entity.getSeculevel();
        if (seculevel != null) {
            stmt.bindString(20, seculevel);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(21, createtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskseq
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deptno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // carid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // plateno
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taskdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // begintime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // endtime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // statusName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // exetime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createuser
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createusername
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // opuser
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // opusername
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // opdate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // tasktype
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tasklevel
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // seculevel
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // createtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTaskcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskseq(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeptno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCarid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlateno(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaskdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBegintime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndtime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatusName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExetime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateuser(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateusername(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOpuser(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOpusername(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOpdate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTasktype(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTasklevel(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSeculevel(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreatetime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
