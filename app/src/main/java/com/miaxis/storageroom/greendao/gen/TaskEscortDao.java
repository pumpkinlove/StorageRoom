package com.miaxis.storageroom.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.storageroom.bean.TaskEscort;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_ESCORT".
*/
public class TaskEscortDao extends AbstractDao<TaskEscort, Void> {

    public static final String TABLENAME = "TASK_ESCORT";

    /**
     * Properties of entity TaskEscort.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TaskCode = new Property(0, String.class, "taskCode", false, "TASK_CODE");
        public final static Property EscortCode = new Property(1, String.class, "escortCode", false, "ESCORT_CODE");
    }


    public TaskEscortDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEscortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ESCORT\" (" + //
                "\"TASK_CODE\" TEXT," + // 0: taskCode
                "\"ESCORT_CODE\" TEXT);"); // 1: escortCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ESCORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEscort entity) {
        stmt.clearBindings();
 
        String taskCode = entity.getTaskCode();
        if (taskCode != null) {
            stmt.bindString(1, taskCode);
        }
 
        String escortCode = entity.getEscortCode();
        if (escortCode != null) {
            stmt.bindString(2, escortCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEscort entity) {
        stmt.clearBindings();
 
        String taskCode = entity.getTaskCode();
        if (taskCode != null) {
            stmt.bindString(1, taskCode);
        }
 
        String escortCode = entity.getEscortCode();
        if (escortCode != null) {
            stmt.bindString(2, escortCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TaskEscort readEntity(Cursor cursor, int offset) {
        TaskEscort entity = new TaskEscort( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // escortCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskEscort entity, int offset) {
        entity.setTaskCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEscortCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TaskEscort entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TaskEscort entity) {
        return null;
    }

    @Override
    public boolean hasKey(TaskEscort entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
