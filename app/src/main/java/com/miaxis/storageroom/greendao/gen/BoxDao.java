package com.miaxis.storageroom.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.storageroom.bean.Box;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOX".
*/
public class BoxDao extends AbstractDao<Box, Long> {

    public static final String TABLENAME = "BOX";

    /**
     * Properties of entity Box.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Boxcode = new Property(1, String.class, "boxcode", false, "BOXCODE");
        public final static Property Boxname = new Property(2, String.class, "boxname", false, "BOXNAME");
        public final static Property Deptno = new Property(3, String.class, "deptno", false, "DEPTNO");
        public final static Property Rfid = new Property(4, String.class, "rfid", false, "RFID");
        public final static Property Opuser = new Property(5, String.class, "opuser", false, "OPUSER");
        public final static Property Opusername = new Property(6, String.class, "opusername", false, "OPUSERNAME");
        public final static Property Opdate = new Property(7, String.class, "opdate", false, "OPDATE");
        public final static Property Money = new Property(8, String.class, "money", false, "MONEY");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property StatusName = new Property(10, String.class, "statusName", false, "STATUS_NAME");
    }


    public BoxDao(DaoConfig config) {
        super(config);
    }
    
    public BoxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"BOXCODE\" TEXT," + // 1: boxcode
                "\"BOXNAME\" TEXT," + // 2: boxname
                "\"DEPTNO\" TEXT," + // 3: deptno
                "\"RFID\" TEXT," + // 4: rfid
                "\"OPUSER\" TEXT," + // 5: opuser
                "\"OPUSERNAME\" TEXT," + // 6: opusername
                "\"OPDATE\" TEXT," + // 7: opdate
                "\"MONEY\" TEXT," + // 8: money
                "\"STATUS\" TEXT," + // 9: status
                "\"STATUS_NAME\" TEXT);"); // 10: statusName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Box entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String boxcode = entity.getBoxcode();
        if (boxcode != null) {
            stmt.bindString(2, boxcode);
        }
 
        String boxname = entity.getBoxname();
        if (boxname != null) {
            stmt.bindString(3, boxname);
        }
 
        String deptno = entity.getDeptno();
        if (deptno != null) {
            stmt.bindString(4, deptno);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(5, rfid);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(7, opusername);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(8, opdate);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(9, money);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(11, statusName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Box entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String boxcode = entity.getBoxcode();
        if (boxcode != null) {
            stmt.bindString(2, boxcode);
        }
 
        String boxname = entity.getBoxname();
        if (boxname != null) {
            stmt.bindString(3, boxname);
        }
 
        String deptno = entity.getDeptno();
        if (deptno != null) {
            stmt.bindString(4, deptno);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(5, rfid);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(7, opusername);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(8, opdate);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(9, money);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(11, statusName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Box readEntity(Cursor cursor, int offset) {
        Box entity = new Box( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boxcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // boxname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deptno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rfid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // opuser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // opusername
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // opdate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // money
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // statusName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Box entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBoxcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBoxname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeptno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRfid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpuser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpusername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOpdate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMoney(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatusName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Box entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Box entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Box entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
